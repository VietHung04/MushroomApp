from flask import Flask, render_template, request
import pickle
import os

app = Flask(__name__)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MODEL_PATH = os.path.join(BASE_DIR, "models", "mushroom_model.pkl")


# Load tree (dict)
with open(MODEL_PATH, "rb") as f:
    tree = pickle.load(f)

# ------------------------
# H√†m d·ª± ƒëo√°n theo ID3 tree
# ------------------------
def predict(tree, sample):
    if not isinstance(tree, dict):
        return tree
    feature = next(iter(tree))
    value = sample.get(feature, None)
    if value in tree[feature]:
        return predict(tree[feature][value], sample)
    else:
        return "e"

# ------------------------
# Thu·ªôc t√≠nh (mapping label ‚Üí m√¥ t·∫£)
# ------------------------
feature_columns = {
    "cap-shape": {
        "b": "Bell (Chu√¥ng)",
        "c": "Conical (N√≥n)",
        "x": "Convex (L·ªìi)",
        "f": "Flat (Ph·∫≥ng)",
        "k": "Knobbed (C√≥ n√∫m)",
        "s": "Sunken (L√µm)"
    },
    "cap-surface": {
        "f": "Fibrous (S·ª£i)",
        "g": "Grooves (R√£nh)",
        "y": "Scaly (V·∫£y)",
        "s": "Smooth (Nh·∫µn)"
    },
    "cap-color": {
        "n": "Brown (N√¢u)",
        "b": "Buff (V√†ng nh·∫°t)",
        "c": "Cinnamon (Qu·∫ø)",
        "g": "Gray (X√°m)",
        "r": "Green (Xanh l√°)",
        "p": "Pink (H·ªìng)",
        "u": "Purple (T√≠m)",
        "e": "Red (ƒê·ªè)",
        "w": "White (Tr·∫Øng)",
        "y": "Yellow (V√†ng)"
    }
}

@app.route("/", methods=["GET", "POST"])
def index():
    result = None
    if request.method == "POST":
        shape = request.form["cap-shape"]
        surface = request.form["cap-surface"]
        color = request.form["cap-color"]

        sample = {
            "cap-shape": shape,
            "cap-surface": surface,
            "cap-color": color
        }

        prediction = predict(tree, sample)
        result = "üçÑ N·∫•m ƒÇn ƒë∆∞·ª£c" if prediction == "e" else "‚ò†Ô∏è N·∫•m ƒê·ªôc / Kh√¥ng ƒÉn ƒë∆∞·ª£c"

    return render_template("index.html", result=result, feature_columns=feature_columns)

if __name__ == "__main__":
    app.run(debug=True)
